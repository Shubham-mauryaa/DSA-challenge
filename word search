link - https://leetcode.com/problems/word-search/description/
code -
class Solution {
    int rowsize, colsize, wordsize;
public:
    bool dfs(int r, int c, int wi, vector<vector<char>>& board, string word ){
        if(r<0 || r>=rowsize || c<0 || c>=colsize || board[r][c]!=word[wi])
            return false;

        if(wi == wordsize-1)
            return true;
        
        char ch = board[r][c];
        board[r][c] = '#';
        
        bool top = dfs(r-1,c,wi+1,board,word);   
        bool bottom = dfs(r+1,c,wi+1,board,word);
        bool left = dfs(r,c-1,wi+1,board,word);
        bool right = dfs(r,c+1,wi+1,board,word);

        board[r][c] = ch;

        return (left || right || top || bottom);
    }
    bool exist(vector<vector<char>>& board, string word) {
        rowsize = board.size(), colsize = board[0].size(), wordsize = word.size();
        int wordindx = 0;

        for(int i=0; i<rowsize; i++){
            for(int j=0; j<colsize; j++){
                if(dfs(i,j,wordindx,board,word))
                    return true;
            }
        }
        return false;
    }
};
