link - https://www.geeksforgeeks.org/problems/median-of-bst/1
code - 
void inorder(Node* root, vector<int>&nums){
    if(!root)return;
    
    inorder(root->left, nums);
    nums.push_back(root->data);
    inorder(root->right, nums);
}
float findMedian(struct Node *root)
{
    vector<int> nums;
    inorder(root, nums);
    
    int n = nums.size();
    double ans;
    if(n%2 != 0){
        ans = nums[n/2];
    }
    else{
        ans = double( nums[n/2] + nums[(n-1)/2] )/2;
    }
    return ans;
}

code2-
int countnodes(Node* root){
    if(!root)return 0;
    
    return 1 + countnodes(root->left) + countnodes(root->right);
}

void median(Node* node,Node* &curr, Node* &prev, int ncnt, int &count, int &flag){
    if(!node)return;
    
    median(node->left, curr, prev, ncnt, count, flag);
    
    if(prev == NULL){
        prev = node;
        count++;
    }
    else if(count == ncnt){
        flag = 1;
        count++;
        curr = node;
        return;
    }
    else if(flag == 0){
        prev = node;
        count++;
    }
    
    median(node->right, curr, prev, ncnt, count, flag);
}

float findMedian(struct Node *root)
{
    int n = countnodes(root);
    
    Node* prev=NULL;
    Node* curr=NULL;
    
    int cnt = 1;
    int k = n/2 + 1;
    int flag = 0;
    
    median(root, curr, prev, k, cnt, flag );
    
    double ans;
    
    if(n%2 == 1){
        ans = curr->data * 1.0;
    }
    else{
        ans = (curr->data + prev->data)/2.0 ;
    }
    
    return ans;
}
