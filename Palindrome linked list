link - https://leetcode.com/problems/palindrome-linked-list/description/
solution - 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverselist(ListNode *head){
        ListNode* pre=NULL;

        while(head){
            ListNode *t = head;
            head = head->next;
            t->next = pre;
            pre = t;
        }

        return pre;
    }

    bool isPalindrome(ListNode* head) {
        ListNode* slow = head, *fast=head->next;

        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }

        ListNode* tail = reverselist(slow->next);
        slow->next = NULL;

        while(tail){
            if(head->val != tail->val)return false;
            head = head->next;
            tail = tail->next;
        }

        return true;
    }
};
